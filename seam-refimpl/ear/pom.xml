<?xml version="1.0" encoding="UTF-8"?>
<project
	xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>no.knowit.seam</groupId>
		<artifactId>seam-refimpl</artifactId>
		<version>1.0-SNAPSHOT</version>
		<relativePath>../pom.xml</relativePath>
	</parent>

	<artifactId>seam-refimpl-ear</artifactId> <!-- m2eclipse does not like: ${app.context}-ear -->
	<name>${project.artifactId} : ${project.version}</name>
	<description>The Seam Maven reference implementation EAR module</description>
	<packaging>ear</packaging>

	<profiles>
		<profile>
			<!--
				Explode ear to appserver deploy folder. execute e.g. 
				"mvn package -Pexplode" or "mvn package -Denv=dev"
			-->
			<id>explode</id>
			<activation>
				<property>
					<name>env</name>
					<value>dev</value>
				</property>
			</activation>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-antrun-plugin</artifactId>
						<executions>
							<execution>
								<id>package</id>
								<phase>package</phase>
								<configuration>
									<tasks>
										<property name="deploy-path" value="${as.deploy}/${app.context}-ear.ear" />
										<echo>Exploding to ${deploy-path}</echo>
										<delete	file="${deploy-path}" quiet="true" />
										<mkdir dir="${deploy-path}" />
										<sync todir="${deploy-path}" verbose="true" >
											<fileset dir="${project.build.directory}/${project.build.finalName}" />
										</sync>
										<!--
											Uncomment this tag if you want to deploy the *-ds.xml file to the appserver's deploy folder
											<copy todir="${as.deploy}" file="${project.build.directory}/${app.ds.xml}" verbose="true" />
										-->
									</tasks>
								</configuration>
								<goals>
									<goal>run</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<!--
				Unexplode ear. Remove project from appserver deploy folder. execute e.g. 
				"mvn clean -Punexplode"
			-->
			<id>unexplode</id>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-antrun-plugin</artifactId>
						<executions>
							<execution>
								<id>clean</id>
								<phase>clean</phase>
								<configuration>
									<tasks>
										<property name="deploy-path" value="${as.deploy}/${app.context}-ear.ear" />
										<delete	file="${deploy-path}"	quiet="true" />
										<delete	dir="${deploy-path}" quiet="true" />
										<!--
											Uncomment this tag if you have deployed the *-ds.xml file to the appserver's deploy folder
											<delete file="${as.deploy}/${app.ds.xml}"	quiet="true" />
										-->
									</tasks>
								</configuration>
								<goals>
									<goal>run</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

    <profile>
      <id>env-prod</id>
      <activation>
        <property>
          <name>env</name>
          <value>prod</value>
        </property>
      </activation>
      <build>
      	<!-- Exclude logging in production (and leave it to JBoss AS) -->
		    <plugins>    
		      <plugin>
		        <groupId>org.apache.maven.plugins</groupId>
		        <artifactId>maven-ear-plugin</artifactId>
		        <configuration>
		          <modules>
		            <jarModule>
		              <groupId>commons-logging</groupId>
		              <artifactId>commons-logging</artifactId>
		              <excluded>true</excluded>
		            </jarModule>
		            <jarModule>
		              <groupId>log4j</groupId>
		              <artifactId>log4j</artifactId>
		              <excluded>true</excluded>
		            </jarModule>
		          </modules>
		        </configuration>
		      </plugin>
		    </plugins>
      </build>
    </profile>
	</profiles>

	<dependencies>
		<!-- project modules -->
		<dependency>
			<groupId>${project.groupId}</groupId>
			<artifactId>${app.context}-war</artifactId>
			<type>war</type>
		</dependency>
		
		<dependency>
			<groupId>${project.groupId}</groupId>
			<artifactId>${app.context}-ejb</artifactId>
			<type>ejb</type>
		</dependency>
		
		<!-- other project modules 
		<dependency> 
			<groupId>${project.groupId}</groupId>
			<artifactId>${app.context}-jar</artifactId> 
		</dependency>
		-->

		<!-- seam -->
		<dependency>
			<groupId>org.jboss.seam</groupId>
			<artifactId>jboss-seam</artifactId>
			<type>ejb</type>
		</dependency>

		<dependency>
			<groupId>org.jboss.el</groupId>
			<artifactId>jboss-el</artifactId>
			<type>jar</type>
		</dependency>

		<!-- richfaces -->
		<dependency>
			<groupId>org.richfaces.framework</groupId>
			<artifactId>richfaces-api</artifactId>
			<type>jar</type>
		</dependency>

		<!-- hibernate -->
		<!--
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-commons-annotations</artifactId>
			<scope>provided</scope>
		</dependency>
		-->
		
		<!-- commons -->
		<dependency>
			<groupId>commons-beanutils</groupId>
			<artifactId>commons-beanutils</artifactId>
			<type>jar</type>
		</dependency>

		<dependency>
			<groupId>commons-digester</groupId>
			<artifactId>commons-digester</artifactId>
			<type>jar</type>
		</dependency>

		<!-- JBoss Rules. Needed if you implement Seam Idendity -->
		<dependency>
			<groupId>org.drools</groupId>
			<artifactId>drools-core</artifactId>
		</dependency>

		<dependency>
			<groupId>org.drools</groupId>
			<artifactId>drools-compiler</artifactId>
		</dependency>

		<dependency>
			<groupId>org.drools</groupId>
			<artifactId>drools-api</artifactId>
		</dependency>

		<dependency>
			<groupId>org.drools</groupId>
			<artifactId>drools-decisiontables</artifactId>
		</dependency>

		<dependency>
			<groupId>org.drools</groupId>
			<artifactId>drools-templates</artifactId>
		</dependency>

		<dependency>
			<groupId>xstream</groupId>
			<artifactId>xstream</artifactId>
		</dependency>

		<dependency>
			<groupId>xpp3</groupId>
			<artifactId>xpp3_min</artifactId>
		</dependency>

		<!-- rules + groovy -->
		<dependency>
			<groupId>org.antlr</groupId>
			<artifactId>antlr-runtime</artifactId>
		</dependency>
		<!-- -->
		
		
		<!-- Added transient by JBoss Rules 
		<dependency>
			<groupId>org.mvel</groupId>
			<artifactId>mvel2</artifactId>
		</dependency> 

		<dependency>
			<groupId>janino</groupId>
			<artifactId>janino</artifactId>
		</dependency>

		<dependency>
			<groupId>org.eclipse.jdt</groupId>
			<artifactId>core</artifactId>
		</dependency>
		-->

		<!-- JBoss jBPM -->
		<!-- Not needed by refimpl
		<dependency>
			<groupId>org.jbpm</groupId>
			<artifactId>jbpm-jpdl</artifactId>
		</dependency>
		-->
	</dependencies>

	<build>
		<plugins>
			<!--
				Maven resources plugin The default resources folder for ear is the
				src/main/application folder. Stuff in this folder will go into the
				target ear folder. The projects *-ds.xml file is placed in the
				src/main/resources folder, so we'll have to use the
				maven-resources-plugin to copy the *-ds.xml file. The reason for
				this is that we need to control where to copy the *-ds.xml is in
				the target build. If we want to deploy the *-ds.xml file embedded
				into the ear project then the file is located in the target/ear root
				folder. If the *-ds.xml file should be deployed as a separate service,
				then the file is located the target folder. The explode profile
				will then copy the *-ds.xml file to the application server's deploy
				folder.
			-->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<executions>
					<execution>
						<id>copy-app-ds-xml</id>
						<phase>validate</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>

							<!--
								Comment out this tag if you have deployed the *-ds.xml file to the appserver's deploy folder
							-->
							<outputDirectory>${project.build.directory}/${project.build.finalName}</outputDirectory>

							<!--
								Uncomment this tag if you have deployed the *-ds.xml file to the appserver's deploy folder
								<outputDirectory>${project.build.directory}</outputDirectory>
							-->
							<resources>
								<resource>
									<directory>src/main/resources</directory>
									<filtering>true</filtering>
									<includes>
										<include>${app.ds.xml}</include>
									</includes>
								</resource>
							</resources>
						</configuration>
					</execution>
 
          <!-- env dependent resources -->					
					<execution>
						<phase>validate</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.build.directory}/${project.build.finalName}</outputDirectory>
							<resources>
								<resource>
									<directory>src/main/application-${env}</directory>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- Maven EAR plugin -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-ear-plugin</artifactId>
				<configuration>
					<finalName>${app.context}-ear</finalName>
					<displayName>${app.display.name}</displayName>
					<description>${app.description}</description>

					<jboss>
						<!--
							To trigger the generation of the jboss-app.xml file you need to
							configure the 'jboss' element. see:
							http://maven.apache.org/plugins/maven-ear-plugin/usage.html and:
							http://maven.apache.org/plugins/maven-ear-plugin/examples/generating-jboss-app.html
						-->
						<version>${as.version}</version>

						<loader-repository>
							<!--
								seam.jboss.org is a Seam-specific scoped classloader. It acts as
								a way for Seam to disassociate artifacts bundled with the
								application from those that exist within the JBoss application
								server's shared artifacts or JARs (for example, those that
								reside in the default server's lib directory or in JBoss's
								general lib directory). 
								The classloader is referenced in jboss-app.xml for EAR deployment and and in 
								jboss-web.xml for WAR deployment (SiA-2.5.3-p63).
								see: http://www.jboss.org/community/wiki/classloadingconfiguration
								see: http://www.mastertheboss.com/en/jboss-application-server/141-jboss-classloader.html
							-->
							seam.jboss.org:loader=${app.context}-ear.ear
						</loader-repository>

						<!--
							Comment out this tag if you have deployed the *-ds.xml file to the appserver's deploy folder
						-->
						<data-sources>
							<data-source>${app.ds.xml}</data-source>
						</data-sources>
					</jboss>

					<archive>
						<manifestEntries>
							<Build-Date>${timestamp}</Build-Date>
							<Build-Revision>${buildNumber}</Build-Revision>
						  <Mode>${env}</Mode>
						</manifestEntries>
					</archive>

					<modules>
						<webModule>
							<groupId>${project.groupId}</groupId>
							<artifactId>${app.context}-war</artifactId>
							<contextRoot>/${app.web.context}</contextRoot>
							<unpack>${env.unpack.modules}</unpack>
						</webModule>

						<ejbModule>
							<groupId>${project.groupId}</groupId>
							<artifactId>${app.context}-ejb</artifactId>
							<unpack>${env.unpack.modules}</unpack>
						</ejbModule>

						<!--
						<jarModule> 
							<groupId>${project.groupId}</groupId>
							<artifactId>${app.context}-jar</artifactId>
							<unpack>${env.unpack.modules}</unpack>
							<includeInApplicationXml>true</includeInApplicationXml>
						</jarModule>
						-->
						
						<ejbModule>
							<groupId>org.jboss.seam</groupId>
							<artifactId>jboss-seam</artifactId>
						</ejbModule>

				    <!-- 
				      logging, see: 
				      http://jaitechwriteups.blogspot.com/2008/04/how-do-i-use-my-own-log4j-properties-or.html 
				      http://www.jboss.org/feeds/post/how_do_i_use_my_own_log4j_properties_or_xml_file_in_jboss
				      
				      NOTE: excluded in production, see the env-prod profile
				    -->
            <jarModule>
				      <groupId>commons-logging</groupId>
				      <artifactId>commons-logging</artifactId>
              <excluded>false</excluded>
				    </jarModule>
				
            <jarModule>
				      <groupId>log4j</groupId>
				      <artifactId>log4j</artifactId>
              <excluded>false</excluded>
				    </jarModule>

					</modules>
				</configuration>
			</plugin>
		</plugins>
		
	</build>

</project>
