<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0                    
                             http://maven.apache.org/maven-v4_0_0.xsd">
                             
  <modelVersion>4.0.0</modelVersion>
  <groupId>no.knowit.sandbox.loo</groupId>
  <artifactId>minimal-groovy-script</artifactId>
  <version>1.0-SNAPSHOT</version>
  <name>${project.artifactId} : ${project.version}</name>
  
	<description>
    Minimal POM to run Groovy scripts in Maven
    
    see:
      http://www.sonatype.com/books/mcookbook/reference/groovy.html
      http://btilford.blogspot.com/2010/02/groovy-170-and-gmaven-12-multi-module.html
      http://stackoverflow.com/questions/2199547/maven-compile-mixed-java-groovy-1-7-project-using-gmaven-plugin
      http://code.google.com/p/spock/source/browse/branches/groovy-1.7/pom.xml
      http://docs.codehaus.org/display/GMAVEN/Executing+Groovy+Code
      http://docs.codehaus.org/display/GMAVEN/Building+Groovy+Projects
      http://groovy.codehaus.org/Regular%2BExpressions
      http://groovy.codehaus.org/JN2015-Files
      http://langref.org/groovy/pattern-matching
      http://pleac.sourceforge.net/pleac_groovy/patternmatching.html
      http://mrhaki.blogspot.com/2009/09/groovy-goodness-matchers-for-regular.html
      http://mrhaki.blogspot.com/2009/10/groovy-goodness-using-configslurper.html
      http://www.ibm.com/developerworks/java/library/j-pg11179/index.html
    
    usage: 
      mvn groovy:execute
      mvn generate-sources -Pshow-properties
      
    play with groovy:
      mvn groovy:console
  </description>
  
  <packaging>pom</packaging>

  <properties>
    <version.gmaven>1.2</version.gmaven>
    <version.groovy>1.7.2</version.groovy>
    
    <jdk.debug>true</jdk.debug>
    <jdk.optimize>false</jdk.optimize>
    <jdk.source>1.6</jdk.source>
    <jdk.target>1.6</jdk.target>
    <hello.maven>Maven says hello</hello.maven>
    <hello.groovy>${hello.maven} to Groovy</hello.groovy>
    
    <!-- http://docs.codehaus.org/display/MAVENUSER/POM+Element+for+Source+File+Encoding -->
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    
    <app>minimal-groovy</app>
    <app.context>minimal-groovy-script</app.context>  <!-- hint: same value as artifactId -->
    <app.web.context>${app.context}</app.web.context>
    <app.display.name>Groovy for Properties</app.display.name>
    <app.distributable>false</app.distributable>
    <app.jndi.pattern>${app.context}-ear/#{ejbName}/local</app.jndi.pattern> <!-- JBoss JNDI Pattern -->
    <app.jndi.pattern.test>/#{ejbName}/Local</app.jndi.pattern.test>         <!-- OpenEJB JNDI Pattern -->
  </properties>

  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>org.codehaus.groovy</groupId>
        <artifactId>groovy-all</artifactId>
        <version>${version.groovy}</version>
      </dependency>
    </dependencies>
  </dependencyManagement>
  
  <dependencies>
    <dependency>
      <groupId>org.codehaus.groovy</groupId>
      <artifactId>groovy-all</artifactId>
    </dependency>
  </dependencies>

  <build>
    <filters>
      <filter>filter.properties</filter>
    </filters>

    <pluginManagement>
      <plugins>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>2.3</version>
          <configuration>
            <source>${jdk.source}</source>
            <target>${jdk.target}</target>
            <encoding>utf-8</encoding>
            <debug>${jdk.debug}</debug>
            <optimize>${jdk.optimize}</optimize>
          </configuration>
        </plugin>

        <plugin>
          <groupId>org.codehaus.gmaven</groupId>
          <artifactId>gmaven-plugin</artifactId>
          <version>${version.gmaven}</version>
          <configuration>
            <providerSelection>1.7</providerSelection>
          </configuration>
          
          <!-- gmaven runtime has a dependency on groovy-all v1.6 but we want 1.7.x -->
          <!-- 
            NOTE: Does not work with println.
            Get following error im m2: 
              [FATAL ERROR] org.codehaus.gmaven.plugin.execute.ExecuteMojo#execute() caused a 
              linkage error (java.lang.NoClassDefFoundError) and may be out-of-date. Check the realms:
              
            Get following error in m3: 
              [ERROR] Failed to execute goal org.codehaus.gmaven:gmaven-plugin:1.2:execute 
              (default-cli) on project minimal-groovy-script: Execution default-cli of goal 
              org.codehaus.gmaven:gmaven-plugin:1.2:execute failed: A required class was missing 
              while executing org.codehaus.gmaven:gmaven-plugin:1.2:execute: 
              org/apache/tools/ant/input/InputHandler
          -->

          <!--
          <dependencies>
            <dependency>
              <groupId>org.codehaus.gmaven.runtime</groupId>
              <artifactId>gmaven-runtime-1.7</artifactId>
              <version>${version.gmaven}</version>
              <exclusions>
                <exclusion>
                  <groupId>org.codehaus.groovy</groupId>
                  <artifactId>groovy-all</artifactId>
                </exclusion>
              </exclusions>
            </dependency>
            <dependency>
              <groupId>org.codehaus.groovy</groupId>
              <artifactId>groovy-all</artifactId>
              <version>${version.groovy}</version>
            </dependency>
          </dependencies>
          -->
  
          <!-- works -->
          <dependencies>
            <dependency>
              <groupId>org.codehaus.gmaven.runtime</groupId>
              <artifactId>gmaven-runtime-1.7</artifactId>
              <version>${version.gmaven}</version>
            </dependency>
          </dependencies>
          
        </plugin>
      </plugins>
    </pluginManagement>
  
    <plugins>
      <plugin>
        <groupId>org.codehaus.gmaven</groupId>
        <artifactId>gmaven-plugin</artifactId>
          <configuration>
            <source>
              println "\n========================================================================"
              println "Hello Groovy script:"
              println "hello.groovy property: " + project.properties['hello.groovy']
              println "========================================================================\n"
            </source>
          </configuration>
      </plugin>
      
      <plugin>
        <groupId>org.codehaus.gmaven</groupId>
        <artifactId>gmaven-plugin</artifactId>
          <executions>
            <execution>
              <id>g-validate</id>
              <phase>validate</phase>
              <goals>
                <goal>execute</goal>
              </goals>
              <configuration>
                <source>
                  def f = new File("./filter.properties");
                  log.info("Reading properties from: $f.canonicalPath");

                  Properties properties = new Properties();
                  properties.load(new FileInputStream(f));
                  
                  // Flatten configuration for easy access keys with dotted notation.
                  def m = new ConfigSlurper().parse(properties).flatten(); //.toProperties();

                  // Add flattened map to project.properties
                  project.properties.putAll(m);

                  // Pattern to match ${property} placeholders
                  def placeholderPattern = ~/\$\{(.*?)\}/;  
                  
                  project.properties.each { key, value ->
                    def matcher = placeholderPattern.matcher(value);
                    if(matcher.count > 0) {
                      // Replace ${property} placeholders with real value
                      matcher.each { placeholder, property ->
                        def placeholderValue = project.properties.getProperty(property);
                        if(placeholderValue) value = value.replace(placeholder, placeholderValue);
                      }
                      project.properties[key] = value;
                    }
                  }
                  
                  // Warn for dangling placholders
                  project.properties.each { key, value ->
                    def matcher = placeholderPattern.matcher(value);
                    if(matcher)
                      log.warn "Non existing property in placeholder: $key = $value" 
                  }
                </source>
              </configuration>                
            </execution>
          </executions>
      </plugin>

    </plugins>
  </build>
  
  <profiles>
    <profile>
      <id>env-dev</id>
      <properties>
        <env>dev</env>
      </properties>
    </profile>

    <profile>
      <id>env-prod</id>
      <activation>
        <activeByDefault>true</activeByDefault>
      </activation>
      <properties>
        <env>prod</env>
      </properties>
    </profile>
    
    <profile>
      <id>show-properties</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.codehaus.gmaven</groupId>
            <artifactId>gmaven-plugin</artifactId>
            <executions>
              <execution>
                <id>g-show-properties</id>
                <phase>generate-sources</phase>
                <goals>
                  <goal>execute</goal>
                </goals>
                  <configuration>
                    <source>
                      // Pattern to match ${property} placeholders
                      def placeholderPattern = ~/\$\{(.*?)\}/;  
                      
                      log.info "========================================================================"
                      log.info "Maven project.properties:"
                      log.info "========================================================================"
                      project.properties.sort{it.key}.each { key, value ->
                        def matcher = placeholderPattern.matcher(value);
                        if(matcher)
                          log.warn "Non existing property in placeholder: $key = $value" 
                        else
                          log.info "$key = $value";
                      }
                      log.info "========================================================================"
                    </source>
                  </configuration>                
              </execution>
            </executions>
          </plugin>        
        </plugins>
      </build>
    </profile>
  </profiles>
</project>
