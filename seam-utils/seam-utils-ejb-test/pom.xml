<?xml version="1.0" encoding="UTF-8"?>
<project 
	xmlns="http://maven.apache.org/POM/4.0.0" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	
  <modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>no.knowit.seam</groupId>
		<artifactId>seam-utils</artifactId>
		<version>1.0-SNAPSHOT</version>
		<relativePath>../pom.xml</relativePath>
	</parent>
	
	<artifactId>seam-utils-ejb-test</artifactId>
	<name>${project.artifactId} : ${project.version}</name>
	<packaging>ejb</packaging>
	<description>
		Tests for "seam-utils-ejb-test" are split into a separate module 
		b.c. we need some exsample code in src/main/java to run the tests.
	</description>
	
	<dependencies>
		<dependency>
			<groupId>no.knowit.seam</groupId>
			<artifactId>seam-utils-ejb</artifactId>
			<type>ejb</type>
			<scope>test</scope>
		</dependency>
			
		<dependency>
			<groupId>no.knowit.seam</groupId>
			<artifactId>seam-utils-openejb</artifactId>
			<type>ejb</type>
			<scope>test</scope>
		</dependency>
	</dependencies>
	
	<profiles>
		<!--
			More than one profile can be active at once. Since profiles can contain the same 
			types of configuration there can be clashes. If two profiles clash the last to be activated 
			will override those activated earlier. 
			Note: "mvn install -Penv-dev" deactivates activeByDefault for the env-prod profile
		 -->
	  <profile>
	    <id>env-dev</id>
	    <properties>
	      <env>dev</env>
	    </properties>
	  </profile>

	  <profile>
	    <id>env-prod</id>
			<activation>
	      <activeByDefault>true</activeByDefault>
			</activation>
	    <properties>
	      <env>prod</env>
	    </properties>
	  </profile>
	</profiles>
	
  <build>
  	<!-- 
		<filters>
		  <filter>../src/main/filters/filter-${env}.properties</filter>
		</filters>
		-->
		
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
			</resource>
		</resources>
		
		<testResources>                                                                                                     
			<testResource>                                                                                                    
				<directory>src/test/resources</directory>                                                                 
				<filtering>true</filtering>                                                                               
			</testResource>
			<testResource>                                                                                                    
				<directory>../src/test/resources-openejb</directory>                                                                 
				<filtering>true</filtering>                                                                               
			</testResource>
		</testResources>
		
  	<plugins>
			<!--
				The Properties Maven Plugin is here to make life a little easier when 
				dealing with properties. It provides goals to read and write properties 
				from and to	files, and also to set system properties. It's main use-case 
				is loading properties	from files instead of declaring them in pom.xml, 
				something that comes in handy when dealing with different environments. 
				The plugin read properties during the	"initialize" phase and the 
				properties are then accessible from the pom.
				 
				The "filters" tag read properties after the "generate-resources" phase 
				but you can not	access the property values from the pom - they are only 
				visible to filters (filtering=true).
			-->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>properties-maven-plugin</artifactId>
				<executions>
					<execution>
						<configuration>
							<files>
								<file>../src/main/filters/filter-${env}.properties</file>
								<!-- 
									does not work with mvn eclipse:m2eclipse
									<file>${project.parent.basedir}/src/main/filters/filter-${env}.properties</file> 
								-->
							</files>
						</configuration>
					</execution>
				</executions>
			</plugin>
			
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-ejb-plugin</artifactId>
			</plugin>
		</plugins>
  </build>
</project>
