#summary Many to Many UI Example.

= Introduction =

The project shows how to use the following UI components to handle JPA `@ManyToMany` CRUD:

{{{
<h:selectManyCheckbox>
<h:selectManyListbox>
<rich:pickList>
<rich:listShuttle>
}}}

Model:

{{{
Language*<------*Person*<----->*Company
                   *
                   |
Interest*<----------
}}}

Person `*<->*` Company is a "bi-directional" association where Person holds the inverse side of the association and Company is the owning side. The important thing to remember when working with many to many bi-directional associations is to remember to update the collection at the owning side `(Company.java)` before the inverse side is persisted `(PersonHome.java)`. Also  note that a  `HashSet` is used on the owning side, which makes it easy to avoid redundant associations. 

== Howto ==
The steps required to get the project up and running:
  * [http://www.glxn.net/seam-maven-refimpl/doc/tutorial/  The Getting Started tutorial explains the basic steps.]
  * [http://seam-maven-refimpl.googlecode.com/svn/trunk/samples Export the examples "root" POM from the samples folder and install it to your local .m2 repo] (mvn install). This is the "root" POM for all the example applications, so you need to install it to your local m2 repo in advance.
  * [http://seam-maven-refimpl.googlecode.com/svn/trunk/samples/knowit/examples/m2m Export project from svn.]
  * Copy m2m/config/profiles.xml to m2m/. Modify profiles.xml as needed.
  * Execute *mvn install -Pexplode*.
  * Start the server and browse to [http://localhost:8080/m2m]

The example utilizes the [http://mojo.codehaus.org/buildnumber-maven-plugin/ Build Number Maven Plugin ] to generate manifest data for the EAR, EJB and WAR mainfest files. Open e.g. the m2m.ear/META-INF/MANIFEST.MF to see the result.