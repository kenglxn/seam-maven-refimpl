<?xml version="1.0" encoding="UTF-8"?>
<project
  xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>no.knowit.seam</groupId>
    <artifactId>root</artifactId>
    <version>2.2.0-SNAPSHOT</version>
  </parent>

  <groupId>no.knowit.sandbox.loo</groupId>
  <artifactId>groovy-properties</artifactId> <!-- m2eclipse does not like: ${app.context} -->
  <version>1.0-SNAPSHOT</version>
  <name>${project.artifactId} : ${project.version}</name>
  <description>Find out how to use Groovy instead og properties-plugin to read properties</description>
  <url>http://code.google.com/p/seam-maven-refimpl/</url>
  <packaging>pom</packaging>

  <modules>
    <module>ejb</module>
    <module>war</module>
    <module>ear</module>
  </modules>

  <properties>
    <app>groovy</app>
    <app.context>groovy-properties</app.context>  <!-- hint: same value as artifactId -->
    <app.web.context>${app.context}</app.web.context>
    <app.display.name>Groovy for Properties</app.display.name>
    <app.distributable>false</app.distributable>
    <app.jndi.pattern>${app.context}-ear/#{ejbName}/local</app.jndi.pattern> <!-- JBoss JNDI Pattern -->
    <app.jndi.pattern.test>/#{ejbName}/Local</app.jndi.pattern.test>         <!-- OpenEJB JNDI Pattern -->

    <!-- 
      Properties for production are located in src/main/filters/filter-prod.properties
      Properties to be modified by developer are located in src/main/filters/filter-dev.properties
      Copy filter-prod.properties to filter-dev.properties and add filter-dev.properties to svn:ignore
    -->
  </properties>

  <dependencyManagement>
    <dependencies>
      <!-- project modules -->
      <dependency>
        <groupId>${project.groupId}</groupId>
        <artifactId>${app.context}-ear</artifactId>
        <version>${project.version}</version>
        <type>ear</type>
      </dependency>
      
      <dependency>
        <groupId>${project.groupId}</groupId>
        <artifactId>${app.context}-war</artifactId>
        <version>${project.version}</version>
        <type>war</type>
      </dependency>
      
      <dependency>
        <groupId>${project.groupId}</groupId>
        <artifactId>${app.context}-ejb</artifactId>
        <version>${project.version}</version>
        <type>ejb</type>
      </dependency>
      
      <!-- other project modules 
      <dependency>
        <groupId>${project.groupId}</groupId>
        <artifactId>${app.context}-jar</artifactId>
        <version>${project.version}</version> 
        <type>jar</type> 
      </dependency>
      -->

      <!-- 
        "Useful" utilities. If you find anything of interest 
        in this module just refactor it into your own project. 
      -->
      <dependency>
        <groupId>no.knowit.seam</groupId>
        <artifactId>seam-utils-ejb</artifactId>
        <version>1.0-SNAPSHOT</version>
        <type>ejb</type>
      </dependency>
      
      <!-- For running Seam tests with OpenEJB embedded container -->
      <dependency>
        <groupId>no.knowit.seam</groupId>
        <artifactId>seam-utils-openejb</artifactId>
        <version>1.0-SNAPSHOT</version>
        <type>ejb</type>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <!-- All provided, shared and test dependencies goes into parent pom -->
  <dependencies>
    
    <!-- seam -->
    <dependency>
      <groupId>org.jboss.seam</groupId>
      <artifactId>jboss-seam</artifactId>
      <scope>provided</scope>
      <type>ejb</type>
    </dependency>

    <dependency>
      <groupId>org.jboss.el</groupId>
      <artifactId>jboss-el</artifactId>
      <scope>provided</scope>
    </dependency>
    
    <!-- richfaces -->
    <dependency>
      <groupId>org.richfaces.framework</groupId>
      <artifactId>richfaces-api</artifactId>
      <scope>provided</scope>
    </dependency>
    
    <!-- hibernate -->
    <dependency>
      <groupId>org.hibernate</groupId>
      <artifactId>hibernate-core</artifactId>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>org.hibernate</groupId>
      <artifactId>hibernate-annotations</artifactId>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>org.hibernate</groupId>
      <artifactId>hibernate-validator</artifactId>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>org.hibernate</groupId>
      <artifactId>hibernate-commons-annotations</artifactId>
      <scope>provided</scope>
    </dependency>

    <!-- jee -->
    <dependency>
      <groupId>javax.ejb</groupId>
      <artifactId>ejb-api</artifactId>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>javax.el</groupId>
      <artifactId>el-api</artifactId>
      <scope>provided</scope>
    </dependency>
    
    <dependency>
      <groupId>javax.faces</groupId>
      <artifactId>jsf-api</artifactId>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>javax.faces</groupId>
      <artifactId>jsf-impl</artifactId>
      <scope>provided</scope>
    </dependency>
    
    <dependency>
      <groupId>javax.persistence</groupId>
      <artifactId>persistence-api</artifactId>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>javax.servlet</groupId>
      <artifactId>servlet-api</artifactId>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>javax.transaction</groupId>
      <artifactId>jta</artifactId>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>javax.jms</groupId>
      <artifactId>jms</artifactId>
      <scope>provided</scope>
    </dependency>		
    
    <!-- commons -->
    <dependency>
      <groupId>commons-collections</groupId>
      <artifactId>commons-collections</artifactId>
      <scope>provided</scope>
    </dependency>
    
    <dependency>
      <groupId>commons-logging</groupId>
      <artifactId>commons-logging</artifactId>
      <scope>provided</scope>
    </dependency>


    <!-- 
      JBoss Rules. Needed to be listed here if you have drools integration tests, e.g. Seam Identity 
      see: samples/jboss-seam/examples/seamspace 
    -->
    <dependency>
      <groupId>org.drools</groupId>
      <artifactId>drools-core</artifactId>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>org.drools</groupId>
      <artifactId>drools-compiler</artifactId>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>org.drools</groupId>
      <artifactId>drools-api</artifactId>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>org.drools</groupId>
      <artifactId>drools-decisiontables</artifactId>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>org.drools</groupId>
      <artifactId>drools-templates</artifactId>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>xstream</groupId>
      <artifactId>xstream</artifactId>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>xpp3</groupId>
      <artifactId>xpp3_min</artifactId>
      <scope>provided</scope>
    </dependency>
    
    <!-- rules + groovy -->
    <dependency>
      <groupId>org.antlr</groupId>
      <artifactId>antlr-runtime</artifactId>
      <scope>provided</scope>
    </dependency>
    
    <!-- JBoss jBPM -->
    <dependency>
      <groupId>org.jbpm</groupId>
      <artifactId>jbpm-jpdl</artifactId>
      <scope>provided</scope>
    </dependency>
    
    <!-- log4j -->
    <dependency>
      <groupId>log4j</groupId>
      <artifactId>log4j</artifactId>
      <scope>provided</scope>
    </dependency>


    <!-- ******** TEST DEPENDECIES ********	-->
    
    <!-- openejb embedded container for running tests -->
    <dependency>
      <groupId>org.apache.openejb</groupId>
      <artifactId>openejb-core</artifactId>
      <scope>test</scope>
    </dependency>
    
    <dependency>
      <groupId>org.hibernate</groupId>
      <artifactId>hibernate-entitymanager</artifactId>
      <scope>test</scope>
      <exclusions>
        <exclusion>
          <groupId>javax.persistence</groupId>
          <artifactId>persistence-api</artifactId>
        </exclusion>
        <exclusion>
          <groupId>javax.transaction</groupId>
          <artifactId>jta</artifactId>
        </exclusion>
      </exclusions>
    </dependency>

    <!-- databases  -->
    <dependency>
      <groupId>com.h2database</groupId>
      <artifactId>h2</artifactId>
      <scope>test</scope>
    </dependency>
    
    <!--
    <dependency>
      <groupId>hsqldb</groupId>
      <artifactId>hsqldb</artifactId>
      <scope>test</scope>
    </dependency>
    -->
    
    <!-- 
    <dependency>
      <groupId>mysql</groupId>
      <artifactId>mysql-connector-java</artifactId>
      <scope>test</scope>
    </dependency>
    -->
    
    <!-- unit test -->
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.testng</groupId>
      <artifactId>testng</artifactId>
      <scope>test</scope>
    </dependency>
    
    <!-- logging -->
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-log4j12</artifactId>
      <scope>test</scope>
    </dependency>
    
    <!--  -->
    <dependency>
      <groupId>javassist</groupId>
      <artifactId>javassist</artifactId>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <profiles>
    <profile>
      <id>show-properties</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.codehaus.gmaven</groupId>
            <artifactId>gmaven-plugin</artifactId>
            <executions>
              <execution>
                <id>g-show-properties</id>
                <phase>initialize</phase>
                <goals>
                  <goal>execute</goal>
                </goals>
                <configuration>
                  <source>
                    // Pattern to match ${property} placeholders
                    def placeholderPattern = ~/\$\{(.*?)\}/;  

                    log.info "========================================================================"
                    log.info "Maven project.properties:"
                    log.info "========================================================================"
                    project.properties.sort{it.key}.each { key, value ->
                      def matcher = placeholderPattern.matcher(value);
                      if(matcher)
                        log.warn "NON EXISTING PROPERTY IN PLACEHOLDER: $key = $value"
                      else
                        log.info "$key = $value";
                    }
                    log.info "========================================================================"
                  </source>
                </configuration>                
              </execution>
            </executions>
          </plugin>        
        </plugins>
      </build>
    </profile>
  </profiles>

  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <configuration>
          <source>${jdk.source}</source>
          <target>${jdk.target}</target>
          <encoding>utf-8</encoding>
          <debug>${jdk.debug}</debug>
          <optimize>${jdk.optimize}</optimize>
        </configuration>
      </plugin>
      
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>buildnumber-maven-plugin</artifactId>
        <configuration>
          <!-- 
            Comment out the format- and items tags if you want the implementation 
            build number fom scm, see e.g. the m2m example project.
          -->
          <format>{0,date,yyyy-MM-dd HH:mm:ss}</format>
          <items>
            <item>timestamp</item>
          </items>
        </configuration>
      </plugin>
      
      <plugin>
        <groupId>org.codehaus.gmaven</groupId>
        <artifactId>gmaven-plugin</artifactId>
          <executions>
            <execution>
              <id>g-validate</id>
              <phase>validate</phase>
              <goals>
                <goal>execute</goal>
              </goals>
              <configuration>
                <source>
                  // Read properties from each file in Maven's filters tag
                  project.filters.each { filter ->
                    log.info "Reading properties from: " + new File(filter).canonicalPath;

                    Properties properties = new Properties();
                    properties.load(new FileInputStream(filter));
                    
                    // Flatten configuration for easy access keys with dotted notation.
                    def burp = new ConfigSlurper().parse(properties).flatten(); //.toProperties();

                    // Add flattened map to project.properties
                    project.properties.putAll(burp);
                  }
                  
                  // Pattern to match ${property} placeholders
                  def placeholderPattern = ~/\$\{(.*?)\}/;  
                  
                  // Replace ${property} placeholders with real value
                  project.properties.each { key, value ->
                    def matcher = placeholderPattern.matcher(value);
                    if(matcher.count > 0) {
                      matcher.each { placeholder, property ->
                        def placeholderValue = project.properties.getProperty(property);
                        if(placeholderValue) value = value.replace(placeholder, placeholderValue);
                      }
                      project.properties[key] = value;
                    }
                  }
                  
                  // Warn for dangling placholders
                  project.properties.each { key, value ->
                    def matcher = placeholderPattern.matcher(value);
                    if(matcher)
                      log.warn "NON EXISTING PROPERTY IN PLACEHOLDER: $key = $value"
                  }
                </source>
              </configuration>                
            </execution>
          </executions>
      </plugin>      
    </plugins>
  </build>

  <scm>
    <connection>scm:svn:http://seam-maven-refimpl.googlecode.com/svn/trunk</connection>
    <developerConnection>scm:svn:https://seam-maven-refimpl.googlecode.com/svn/trunk</developerConnection>
    <url>http://code.google.com/p/seam-maven-refimpl/source/browse/#svn/trunk</url>
  </scm>
	
</project>