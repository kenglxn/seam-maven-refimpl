<?xml version="1.0" encoding="UTF-8"?>
<project
  xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>no.knowit.seam.examples</groupId> 
		<artifactId>open18-stages-ch03</artifactId> <!-- m2eclipse does not like: ${app.context}-ear -->
		<version>2.2.1-SNAPSHOT</version>
    <relativePath>../pom.xml</relativePath>
  </parent>

	<artifactId>open18-stages-ch03-ear</artifactId>  <!-- m2eclipse does not like: ${app.context}-ear -->
	<name>${project.artifactId} : ${project.version}</name>
	<description>Open18 stages ch03 EAR module</description>
  <packaging>ear</packaging>

  <profiles>
    <!--
      More than one profile can be active at once. Since profiles can contain the same 
      types of configuration there can be clashes. If two profiles clash the last to be activated 
      will override those activated earlier. 
      Note: "mvn install -Penv-dev" deactivates activeByDefault profiles
     -->
    <profile>
      <id>env-dev</id>
      <activation>
        <property>
          <name>env</name>
          <value>dev</value>
        </property>
      </activation>
      <properties>
        <env>dev</env>
      </properties>
    </profile>

    <profile>
      <id>env-prod</id>
      <activation>
        <activeByDefault>true</activeByDefault>
      </activation>
      <properties>
        <env>prod</env>
      </properties>
    </profile>
  
    <profile>
      <!--
        Explode ear to appserver deploy folder. execute e.g. 
        "mvn package -Pexplode" or "mvn package -Denv=dev"
      -->
      <id>explode</id>
      <activation>
        <property>
          <name>env</name>
          <value>dev</value>
        </property>
      </activation>
      <build>
        <plugins>
          <plugin>
            <artifactId>maven-antrun-plugin</artifactId>
            <executions>
              <execution>
                <id>package</id>
                <phase>package</phase>
                <configuration>
                  <tasks>
                    <property name="deploy-path" value="${as.deploy}/${app.context}-ear.ear" />
                    <echo>Exploding to ${deploy-path}</echo>
                    <delete	file="${deploy-path}" quiet="true" />
                    <mkdir dir="${deploy-path}" />
                    <sync todir="${deploy-path}" verbose="true" >
                      <fileset dir="${project.build.directory}/${project.build.finalName}" />
                    </sync>
                    <!--
                      Uncomment this tag if you want to deploy the *-ds.xml file to the appserver's deploy folder
                      <copy todir="${as.deploy}" file="${project.build.directory}/${ds.xml}" verbose="true" />
                    -->
                  </tasks>
                </configuration>
                <goals>
                  <goal>run</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <!--
        Unexplode ear. Remove project from appserver deploy folder. 
        Execute e.g. "mvn clean -Punexplode"
      -->
      <id>unexplode</id>
      <build>
        <plugins>
          <plugin>
            <artifactId>maven-antrun-plugin</artifactId>
            <executions>
              <execution>
                <id>clean</id>
                <phase>clean</phase>
                <configuration>
                  <tasks>
                    <property name="deploy-path" value="${as.deploy}/${app.context}-ear.ear" />
                    
                    <echo>Unexploding: ${deploy-path}</echo>
                    
                    <delete	file="${deploy-path}"	quiet="true" />
                    <delete	dir="${deploy-path}" quiet="true" />
                    <!--
                      Uncomment this tag if you have deployed the *-ds.xml file to the appserver's deploy folder
                      <delete file="${as.deploy}/${ds.xml}"	quiet="true" />
                    -->
                  </tasks>
                </configuration>
                <goals>
                  <goal>run</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>

  <dependencies>
    <!-- project modules -->
		<dependency>
			<groupId>${project.groupId}</groupId>
			<artifactId>${app.context}-war</artifactId>
			<type>war</type>
		</dependency>
		
		<dependency>
			<groupId>${project.groupId}</groupId>
			<artifactId>${app.context}-action</artifactId>
			<type>ejb</type>
		</dependency>
		
		<dependency>
			<groupId>${project.groupId}</groupId>
			<artifactId>${app.context}-model</artifactId>
			<type>jar</type>
		</dependency>
    
    <!-- seam -->
    <dependency>
      <groupId>org.jboss.seam</groupId>
      <artifactId>jboss-seam</artifactId>
      <type>ejb</type>
    </dependency>

    <dependency>
      <groupId>org.jboss.el</groupId>
      <artifactId>jboss-el</artifactId>
      <type>jar</type>
    </dependency>

    <!-- richfaces -->
    <dependency>
      <groupId>org.richfaces.framework</groupId>
      <artifactId>richfaces-api</artifactId>
      <type>jar</type>
    </dependency>

    <!-- commons -->
    <dependency>
      <groupId>commons-beanutils</groupId>
      <artifactId>commons-beanutils</artifactId>
      <type>jar</type>
    </dependency>

    <dependency>
      <groupId>commons-digester</groupId>
      <artifactId>commons-digester</artifactId>
      <type>jar</type>
    </dependency>


  </dependencies>

  <build>
    <plugins>
      <!--
        The Properties Maven Plugin is here to make life a little easier when 
        dealing with properties. It provides goals to read and write properties 
        from and to	files, and also to set system properties. It's main use-case 
        is loading properties	from files instead of declaring them in pom.xml, 
        something that comes in handy when dealing with different environments. 
        The plugin read properties during the	"validate" phase and the 
        properties are then accessible from the pom.
         
        The "filters" tag read properties after the "generate-resources" phase 
        but you can not	access the property values from the pom - they are only 
        visible to filters (filtering=true).
      -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>properties-maven-plugin</artifactId>
        <executions>
          <execution>
            <configuration>
              <files>
                <file>../src/main/filters/filter-${env}.properties</file>
              </files>
            </configuration>
          </execution>
          <execution>
            <!-- Properties needed by unexplode profile -->
            <id>pre-clean</id>
            <phase>pre-clean</phase>
            <goals>
              <goal>read-project-properties</goal>
            </goals>
            <configuration>
              <files>
                <file>../src/main/filters/filter-${env}.properties</file>
              </files>
            </configuration>
          </execution>
        </executions>
      </plugin>		
      
      <!--
        Maven resources plugin The default resources folder for ear is the
        src/main/application folder. Stuff in this folder will go into the
        target ear folder. The projects *-ds.xml file is placed in the
        src/main/resources folder, so we'll have to use the
        maven-resources-plugin to copy the *-ds.xml file. The reason for
        this is that we need to control where to copy the *-ds.xml is in
        the target build. If we want to deploy the *-ds.xml file embedded
        into the ear project then the file is located in the target/ear root
        folder. If the *-ds.xml file should be deployed as a separate service,
        then the file is located the target folder. The explode profile
        will then copy the *-ds.xml file to the application server's deploy
        folder.
      -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-resources-plugin</artifactId>
        <executions>
          <execution>
            <id>copy-app-ds-xml</id>
            <phase>initialize</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>

              <!--
                Comment out this tag if you have deployed the *-ds.xml file to the appserver's deploy folder
              -->
              <outputDirectory>${project.build.directory}/${project.build.finalName}</outputDirectory>

              <!--
                Uncomment this tag if you have deployed the *-ds.xml file to the appserver's deploy folder
                <outputDirectory>${project.build.directory}</outputDirectory>
              -->
              <resources>
                <resource>
                  <directory>src/main/resources</directory>
                  <filtering>true</filtering>
                  <includes>
                    <include>${ds.xml}</include>
                  </includes>
                </resource>
              </resources>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- Maven EAR plugin -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-ear-plugin</artifactId>
        <configuration>
          <finalName>${app.context}-ear</finalName>
          <displayName>${app.display.name}</displayName>
          <description>${app.description}</description>
          <jboss>
            <!--
              To trigger the generation of the jboss-app.xml file you need to
              configure the 'jboss' element. see:
              http://maven.apache.org/plugins/maven-ear-plugin/usage.html and:
              http://maven.apache.org/plugins/maven-ear-plugin/examples/generating-jboss-app.html
            -->
            <version>${as.version}</version>

            <loader-repository>
              <!--
                seam.jboss.org is a Seam-specific scoped classloader. It acts as
                a way for Seam to disassociate artifacts bundled with the
                application from those that exist within the JBoss application
                server's shared artifacts or JARs (for example, those that
                reside in the default server's lib directory or in JBoss's
                general lib directory). 
                The classloader is referenced in jboss-app.xml for EAR deployment and and in 
                jboss-web.xml for WAR deployment (SiA-2.5.3-p63).
                see: http://www.jboss.org/community/wiki/classloadingconfiguration
                see: http://www.mastertheboss.com/en/jboss-application-server/141-jboss-classloader.html
              -->
              seam.jboss.org:loader=${app.context}-ear
            </loader-repository>

            <!--
              Comment out this tag if you have deployed the *-ds.xml file to the appserver's deploy folder
            -->
            <data-sources>
              <data-source>${ds.xml}</data-source>
            </data-sources>
          </jboss>

          <archive>
            <manifestEntries>
              <Build-Date>${timestamp}</Build-Date>
              <Mode>${env}</Mode>
            </manifestEntries>
          </archive>

          <modules>
						<webModule>
							<groupId>${project.groupId}</groupId>
							<artifactId>${app.context}-war</artifactId>
							<contextRoot>/${app.web.context}</contextRoot>
              <unpack>${app.unpack.modules}</unpack>
						</webModule>

						<ejbModule>
							<groupId>${project.groupId}</groupId>
							<artifactId>${app.context}-action</artifactId>
              <unpack>${app.unpack.modules}</unpack>
						</ejbModule>
						
						<jarModule>
							<groupId>${project.groupId}</groupId>
							<artifactId>${app.context}-model</artifactId>
              <unpack>${app.unpack.modules}</unpack>
							<includeInApplicationXml>true</includeInApplicationXml>
						</jarModule>

            <ejbModule>
              <groupId>org.jboss.seam</groupId>
              <artifactId>jboss-seam</artifactId>
            </ejbModule>
          </modules>
        </configuration>
      </plugin>
    </plugins>
  </build>
</project>
