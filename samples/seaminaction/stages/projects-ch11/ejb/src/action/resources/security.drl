package org.open18.permissions;

import java.security.Principal;
import org.jboss.seam.security.PermissionCheck;
import org.jboss.seam.security.Role;
import org.open18.model.Facility;
import org.open18.model.Course;
import org.open18.model.Golfer;
import org.open18.model.Round;

// ===== Component-level rules =====

// #{s:hasPermission('facilityHome', 'update', facilityHome.instance)}
// #{s:hasPermission('facilityHome', 'remove', facilityHome.instance)}
// Allows an admin to update or remove a private facility
rule ModifyPrivateFacility
	no-loop
when
	$perm: PermissionCheck(name == "facilityHome", action in ("update", "remove"), granted == false)
	Role(name == "admin")
	Facility(type == "PRIVATE")
	// or match multiple types -> Facility(type == "PRIVATE" || == "RESORT")
then
	$perm.grant();
end

// #{s:hasPermission('facilityHome', 'update', facilityHome.instance)}
// #{s:hasPermission('facilityHome', 'remove', facilityHome.instance)}
// Allows a member to update or remove a non-private facility
rule ModifyNonPrivateFacility
	no-loop
when
	$perm: PermissionCheck(name == "facilityHome", action in ("update", "remove"), granted == false)
	Role(name == "member")
	not Facility(type == "PRIVATE")
then
	$perm.grant();
end

// #{s:hasPermission('facilityHome', 'update', facilityHome.instance)}
// #{s:hasPermission('facilityHome', 'remove', facilityHome.instance)}
// Allows an owner to operate on his or her facility (regardless of type)
rule OperateOnOwnFacility
	no-loop
when
	$perm: PermissionCheck(name == "facilityHome", granted == false)
	Role(name == "member")
	Principal($username: name)
	Facility($golfer: owner)
	Golfer(username == $username) from $golfer
then
	$perm.grant();
end

// #{s:hasPermission('courseHome', 'update', courseHome.instance)}
// #{s:hasPermission('courseHome', 'remove', courseHome.instance)}
// Allows an admin to update or remove a course at a private facility
rule ModifyPrivateCourse
	no-loop
when
	$perm: PermissionCheck(name == "courseHome", action in ("update", "remove"), granted == false)
	Role(name == "admin")
    Course($facility: facility)
	Facility(type == "PRIVATE") from $facility
then
	$perm.grant();
end

// #{s:hasPermission('courseHome', 'update', courseHome.instance)}
// #{s:hasPermission('courseHome', 'remove', courseHome.instance)}
// Allows a member to update or remove a course at a non-private facility
rule ModifyNonPrivateCourse
	no-loop
when
	$perm: PermissionCheck(name == "courseHome", action in ("update", "remove"), granted == false)
	Role(name == "member")
    Course($facility: facility)
	Facility(type != "PRIVATE") from $facility
	// or exclude multiple types -> Facility(type != "PRIVATE" || == "RESORT") from $facility
then
	$perm.grant();
end

// #{s:hasPermission('courseHome', 'update', courseHome.instance)}
// #{s:hasPermission('courseHome', 'remove', courseHome.instance)}
// Allows an owner to operate on a course at his or her facility (regardless of type)
rule OperateOnOwnCourse
	no-loop
when
	$perm: PermissionCheck(name == "courseHome", granted == false)
	Role(name == "member")
	Principal($username: name)
	Facility($golfer: owner)
	Golfer(username == $username) from $golfer
then
	$perm.grant();
end

// ===== Entity-level rules =====

// Applied to the Round entity class using: @Restrict @PreUpdate @PreRemove
// Allows a golfer to update or delete his or her own round
rule ModifyOwnRound
	no-loop
when
    // NOTE: name is value of @Name on entity class or else the fully-qualified entity class name
	$perm: PermissionCheck(name == "round", action in ("update", "delete"), granted == false)
	Role(name == "member")
	Principal($username: name)
	Round($golfer: golfer)
	Golfer(username == $username) from $golfer
then
	$perm.grant();
end

// ===== Page-level rules =====

// #{s:hasPermission('/FacilityEdit.xhtml', null, facilityHome.instance)}
// Allows any member to add a facility
rule EditNewFacility
	no-loop
when
	$perm: PermissionCheck(name == "/FacilityEdit.xhtml", granted == false)
	Role(name == "member")
    Facility(id == null)
then
	$perm.grant();
end

// #{s:hasPermission('/FacilityEdit.xhtml', null, facilityHome.instance)}
// Allows an admin to bring up a private facility in the editor
rule EditPrivateFacility
	no-loop
when
	$perm: PermissionCheck(name == "/FacilityEdit.xhtml", granted == false)
	Role(name == "admin")
	Facility(type == "PRIVATE")
then
	$perm.grant();
end

// #{s:hasPermission('/FacilityEdit.xhtml', null, facilityHome.instance)}
// Allows a member to bring up a non-private facility in the editor
rule EditNonPrivateFacility
	no-loop
when
	$perm: PermissionCheck(name == "/FacilityEdit.xhtml", granted == false)
	Role(name == "member")
	not Facility(type == "PRIVATE")
then
	$perm.grant();
end

// #{s:hasPermission('/FacilityEdit.xhtml', null, facilityHome.instance)}
// Allows an owner to bring up his or her facility in the editor (regardless of type)
rule EditOwnFacility
	no-loop
when
	$perm: PermissionCheck(name == "/FacilityEdit.xhtml", granted == false)
	Role(name == "member")
	Principal($username: name)
	Facility($golfer: owner)
	Golfer(username == $username) from $golfer
then
	$perm.grant();
end

// #{s:hasPermission('/CourseEdit.xhtml', null, courseHome.instance)}
// Allows any member to add a course
rule EditNewCourse
	no-loop
when
	$perm: PermissionCheck(name == "/CourseEdit.xhtml", granted == false)
	Role(name == "member")
    Course(id == null)
then
	$perm.grant();
end

// #{s:hasPermission('/CourseEdit.xhtml', null, courseHome.instance)}
// Allows an admin to bring up a course at a private facility in the editor
rule EditPrivateCourse
	no-loop
when
	$perm: PermissionCheck(name == "/CourseEdit.xhtml", granted == false)
	Role(name == "admin")
    Course($facility: facility)
	Facility(type == "PRIVATE") from $facility
then
	$perm.grant();
end

// #{s:hasPermission('/CourseEdit.xhtml', null, courseHome.instance)}
// Allows a member to bring up a course at a non-private facility in the editor
rule EditNonPrivateCourse
	no-loop
when
	$perm: PermissionCheck(name == "/CourseEdit.xhtml", granted == false)
	Role(name == "member")
    Course($facility: facility)
	Facility(type != "PRIVATE") from $facility
then
	$perm.grant();
end

// #{s:hasPermission('/CourseEdit.xhtml', null, courseHome.instance)}
// Allows an owner to bring up a course at his or her facility in the editor (regardless of type)
rule EditOwnCourse
	no-loop
when
	$perm: PermissionCheck(name == "/CourseEdit.xhtml", granted == false)
	Role(name == "member")
	Principal($username: name)
	Facility($golfer: owner)
	Golfer(username == $username) from $golfer
then
	$perm.grant();
end
