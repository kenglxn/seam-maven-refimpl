<?xml version="1.0" encoding="UTF-8"?>
<project
  xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

  <modelVersion>4.0.0</modelVersion>
  <parent>
		<groupId>no.knowit.seam.examples</groupId>
		<artifactId>jboss-seam-drools</artifactId>
		<version>2.2.0-SNAPSHOT</version>
    <relativePath>../pom.xml</relativePath>
  </parent>

	<artifactId>jboss-seam-drools-ear</artifactId> <!-- m2eclipse does not like: ${app.context}-ear -->
	<name>${project.artifactId} : ${project.version}</name>
	<description>The Mavenized JBoss Seam Drools Example EAR module</description>
  <packaging>ear</packaging>

  <profiles>
    <!--
      More than one profile can be active at once. Since profiles can contain the same 
      types of configuration there can be clashes. If two profiles clash the last to be activated 
      will override those activated earlier. 
      Note: "mvn install -Penv-dev" deactivates activeByDefault profiles
     -->
    <profile>
      <id>env-dev</id>
      <activation>
        <property>
          <name>env</name>
          <value>dev</value>
        </property>
      </activation>
      <properties>
        <env>dev</env>
      </properties>
    </profile>

    <profile>
      <id>env-prod</id>
      <activation>
        <activeByDefault>true</activeByDefault>
      </activation>
      <properties>
        <env>prod</env>
      </properties>
    </profile>
  
    <profile>
      <!--
        Explode ear to appserver deploy folder. execute e.g. 
        "mvn package -Pexplode" or "mvn package -Denv=dev"
      -->
      <id>explode</id>
      <activation>
        <property>
          <name>env</name>
          <value>dev</value>
        </property>
      </activation>
      <build>
        <plugins>
          <plugin>
            <artifactId>maven-antrun-plugin</artifactId>
            <executions>
              <execution>
                <id>package</id>
                <phase>package</phase>
                <configuration>
                  <tasks>
                    <property name="deploy-path" value="${as.deploy}/${app.context}-ear.ear" />
                    <echo>Exploding to ${deploy-path}</echo>
                    <delete	file="${deploy-path}" quiet="true" />
                    <mkdir dir="${deploy-path}" />
                    <sync todir="${deploy-path}" verbose="true" >
                      <fileset dir="${project.build.directory}/${project.build.finalName}" />
                    </sync>
                  </tasks>
                </configuration>
                <goals>
                  <goal>run</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <!--
        Unexplode ear. Remove project from appserver deploy folder. 
        Execute e.g. "mvn clean -Punexplode"
      -->
      <id>unexplode</id>
      <build>
        <plugins>
          <plugin>
            <artifactId>maven-antrun-plugin</artifactId>
            <executions>
              <execution>
                <id>clean</id>
                <phase>clean</phase>
                <configuration>
                  <tasks>
                    <property name="deploy-path" value="${as.deploy}/${app.context}-ear.ear" />
                    <echo>Unexploding: ${deploy-path}</echo>
                    <delete	file="${deploy-path}"	quiet="true" />
                    <delete	dir="${deploy-path}" quiet="true" />
                  </tasks>
                </configuration>
                <goals>
                  <goal>run</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>

  <dependencies>
    <!-- project modules -->
    <dependency>
      <groupId>${project.groupId}</groupId>
      <artifactId>${app.context}-war</artifactId>
      <type>war</type>
    </dependency>
    
    <dependency>
      <groupId>${project.groupId}</groupId>
      <artifactId>${app.context}-ejb</artifactId>
      <type>ejb</type>
    </dependency>
    
    <!-- seam -->
    <dependency>
      <groupId>org.jboss.seam</groupId>
      <artifactId>jboss-seam</artifactId>
      <type>ejb</type>
    </dependency>

    <dependency>
      <groupId>org.jboss.el</groupId>
      <artifactId>jboss-el</artifactId>
      <type>jar</type>
    </dependency>

    <!-- commons -->
    <dependency>
      <groupId>commons-beanutils</groupId>
      <artifactId>commons-beanutils</artifactId>
      <type>jar</type>
    </dependency>

    <dependency>
      <groupId>commons-digester</groupId>
      <artifactId>commons-digester</artifactId>
      <type>jar</type>
    </dependency>

    <!-- 
      JBoss Rules. Needed if you implement drools functionality, e.g. Seam Idendity 
      see: samples/jboss-seam/examlpes/seamspace 
    -->
    <dependency>
      <groupId>org.drools</groupId>
      <artifactId>drools-core</artifactId>
    </dependency>

    <dependency>
      <groupId>org.drools</groupId>
      <artifactId>drools-compiler</artifactId>
    </dependency>

    <dependency>
      <groupId>org.drools</groupId>
      <artifactId>drools-api</artifactId>
    </dependency>

    <dependency>
      <groupId>org.drools</groupId>
      <artifactId>drools-decisiontables</artifactId>
    </dependency>

    <dependency>
      <groupId>org.drools</groupId>
      <artifactId>drools-templates</artifactId>
    </dependency>

    <dependency>
      <groupId>xstream</groupId>
      <artifactId>xstream</artifactId>
    </dependency>

    <dependency>
      <groupId>xpp3</groupId>
      <artifactId>xpp3_min</artifactId>
    </dependency>
    
    <!-- rules + groovy -->
    <dependency>
      <groupId>org.antlr</groupId>
      <artifactId>antlr-runtime</artifactId>
    </dependency>
    
    <!-- Added transient by JBoss Rules 
    <dependency>
      <groupId>org.mvel</groupId>
      <artifactId>mvel2</artifactId>
    </dependency> 

    <dependency>
      <groupId>janino</groupId>
      <artifactId>janino</artifactId>
    </dependency>

    <dependency>
      <groupId>org.eclipse.jdt</groupId>
      <artifactId>core</artifactId>
    </dependency>
    -->

    <!-- JBoss jBPM -->
    <dependency>
      <groupId>org.jbpm</groupId>
      <artifactId>jbpm-jpdl</artifactId>
    </dependency>
		
		<!--  Excel export -->
		<dependency>
			<groupId>net.sourceforge.jexcelapi</groupId>
			<artifactId>jxl</artifactId>
		</dependency>

  </dependencies>

  <build>
    <plugins>
      <!--
        The Properties Maven Plugin is here to make life a little easier when 
        dealing with properties. It provides goals to read and write properties 
        from and to	files, and also to set system properties. It's main use-case 
        is loading properties	from files instead of declaring them in pom.xml, 
        something that comes in handy when dealing with different environments. 
        The plugin read properties during the	"validate" phase and the 
        properties are then accessible from the pom.
         
        The "filters" tag read properties after the "generate-resources" phase 
        but you can not	access the property values from the pom - they are only 
        visible to filters (filtering=true).
      -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>properties-maven-plugin</artifactId>
        <executions>
          <execution>
            <configuration>
              <files>
                <file>../src/main/filters/filter-${env}.properties</file>
              </files>
            </configuration>
          </execution>
          <execution>
            <!-- Properties needed by unexplode profile -->
            <id>pre-clean</id>
            <phase>pre-clean</phase>
            <goals>
              <goal>read-project-properties</goal>
            </goals>
            <configuration>
              <files>
                <file>../src/main/filters/filter-${env}.properties</file>
              </files>
            </configuration>
          </execution>
        </executions>
      </plugin>		
      
      <!-- Maven EAR plugin -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-ear-plugin</artifactId>
        <configuration>
          <finalName>${app.context}-ear</finalName>
          <displayName>${app.display.name}</displayName>
          <description>${app.description}</description>
          <jboss>
            <!--
              To trigger the generation of the jboss-app.xml file you need to
              configure the 'jboss' element. see:
              http://maven.apache.org/plugins/maven-ear-plugin/usage.html and:
              http://maven.apache.org/plugins/maven-ear-plugin/examples/generating-jboss-app.html
            -->
            <version>${as.version}</version>

            <loader-repository>
              <!--
                seam.jboss.org is a Seam-specific scoped classloader. It acts as
                a way for Seam to disassociate artifacts bundled with the
                application from those that exist within the JBoss application
                server's shared artifacts or JARs (for example, those that
                reside in the default server's lib directory or in JBoss's
                general lib directory). 
                The classloader is referenced in jboss-app.xml for EAR deployment and and in 
                jboss-web.xml for WAR deployment (SiA-2.5.3-p63).
                see: http://www.jboss.org/community/wiki/classloadingconfiguration
                see: http://www.mastertheboss.com/en/jboss-application-server/141-jboss-classloader.html
              -->
              seam.jboss.org:loader=${app.context}-ear
            </loader-repository>
          </jboss>

          <archive>
            <manifestEntries>
              <Build-Date>${timestamp}</Build-Date>
              <Mode>${env}</Mode>
            </manifestEntries>
          </archive>

          <modules>
            <webModule>
              <groupId>${project.groupId}</groupId>
              <artifactId>${app.context}-war</artifactId>
              <contextRoot>/${app.web.context}</contextRoot>
              <unpack>${app.unpack.modules}</unpack>
            </webModule>

            <ejbModule>
              <groupId>${project.groupId}</groupId>
              <artifactId>${app.context}-ejb</artifactId>
              <unpack>${app.unpack.modules}</unpack>
            </ejbModule>

            <ejbModule>
              <groupId>org.jboss.seam</groupId>
              <artifactId>jboss-seam</artifactId>
            </ejbModule>

          </modules>
        </configuration>
      </plugin>
    </plugins>
    
  </build>

</project>
